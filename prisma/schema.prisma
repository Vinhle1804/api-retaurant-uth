// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  phone            String?
  password         String
  avatar           String?
  role             String            @default("Employee") // Owner, Employee, GuestOnline
  orders           Order[]           @relation("OrderAccount")
  ordersOnline     OrderOnline[] // Mối quan hệ một khách hàng có thể có nhiều đơn hàng online
  handledOrders    Order[]           @relation("OrderHandlerRelation")
  employees        Account[]         @relation("OwnerEmployee")
  owner            Account?          @relation("OwnerEmployee", fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  ownerId          Int?
  refreshToken     RefreshToken[]
  sockets          Socket[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  addresses        DeliveryAddress[] @relation("AccountAddresses") // One-to-many: nhiều địa chỉ thuộc 1 account
  defaultAddressId Int? // Id địa chỉ mặc định
  defaultAddress   DeliveryAddress?  @relation(fields: [defaultAddressId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model Dish {
  id            Int            @id @default(autoincrement())
  name          String
  price         Int
  description   String
  image         String
  status        String         @default("Available")
  dishSnapshots DishSnapshot[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model DishSnapshot {
  id                Int               @id @default(autoincrement())
  name              String
  price             Int
  description       String
  image             String
  status            String            @default("Available")
  dishId            Int?
  dish              Dish?             @relation(fields: [dishId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedAt         DateTime          @updatedAt
  createdAt         DateTime          @default(now())
  order             Order[]           @relation("DishOrder")
  orderOnlineDishes OrderOnlineItem[]
}

model Table {
  number    Int      @id
  capacity  Int
  orders    Order[]
  guests    Guest[]
  status    String   @default("Available")
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             Int          @id @default(autoincrement())
  guestId        Int?
  guest          Guest?       @relation(fields: [guestId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  accountId      Int?
  account        Account?     @relation("OrderAccount", fields: [accountId], references: [id], onDelete: SetNull)
  table          Table?       @relation(fields: [tableNumber], references: [number], onDelete: SetNull, onUpdate: NoAction)
  tableNumber    Int?
  dishSnapshot   DishSnapshot @relation("DishOrder", fields: [dishSnapshotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dishSnapshotId Int          @unique
  quantity       Int
  orderHandler   Account?     @relation("OrderHandlerRelation", fields: [orderHandlerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  orderHandlerId Int?
  status         String       @default("Pending")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model RefreshToken {
  token     String   @id
  accountId Int
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Guest {
  id                    Int       @id @default(autoincrement())
  name                  String
  table                 Table?    @relation(fields: [tableNumber], references: [number], onDelete: SetNull, onUpdate: NoAction)
  tableNumber           Int?
  orders                Order[]
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  sockets               Socket[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Socket {
  socketId  String   @id
  accountId Int?     @unique
  account   Account? @relation(fields: [accountId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  guestId   Int?     @unique
  guest     Guest?   @relation(fields: [guestId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model OrderOnline {
  id                Int               @id @default(autoincrement())
  trackingNumber    String? // Số theo dõi đơn hàng (có thể null nếu chưa có số theo dõi)
  accountId         Int // Liên kết với tài khoản khách hàng online nếu có
  account           Account           @relation(fields: [accountId], references: [id])
  deliveryAddressId Int // Khóa ngoại đến DeliveryAddress
  deliveryAddress   DeliveryAddress   @relation(fields: [deliveryAddressId], references: [id])
  status            String            @default("Pending") // Trạng thái đơn hàng: Pending, Shipped, Delivered
  paymentMethod     String // Phương thức thanh toán: Credit Card, COD, etc.
  deliveryOption    String
  totalPrice        Int // Tổng giá trị đơn hàng
  items             OrderOnlineItem[] // Mối quan hệ một đơn hàng có thể có nhiều món ăn
  note              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model OrderOnlineItem {
  id             Int          @id @default(autoincrement())
  orderOnlineId  Int
  orderOnline    OrderOnline  @relation(fields: [orderOnlineId], references: [id])
  dishSnapshotId Int
  dishSnapshot   DishSnapshot @relation(fields: [dishSnapshotId], references: [id])
  quantity       Int
  price          Int // Giá của món ăn khi khách đặt online
}

model DeliveryFees {
  id            Int      @id @default(autoincrement()) // Tự động tăng cho id
  code          String   @unique // Mã định danh: 'fast', 'priority', 'economy'
  label         String // Tên hiển thị: 'Giao nhanh', 'Ưu tiên'
  description   String? // Mô tả chi tiết (có thể null)
  estimatedTime String? // Ví dụ: '30 phút' (có thể null)
  baseFee       Int // Phí cơ bản (VNĐ)
  extraFeePerKm Int      @default(0) // Phụ phí theo km (nếu cần)
  maxDistance   Int      @default(0) // Khoảng cách tối đa áp dụng (km, 0 = không giới hạn)
  isActive      Boolean  @default(true) // Còn áp dụng không
  createdAt     DateTime @default(now()) // Thời gian tạo
  updatedAt     DateTime @updatedAt // Thời gian cập nhật
}

model DeliveryAddress {
  id   Int    @id @default(autoincrement())
  accountId Int // Khóa ngoại
  account   Account @relation("AccountAddresses", fields: [accountId], references: [id], onDelete: Cascade)

  recipientName  String // tên người nhận tại địa chỉ này
  recipientPhone String // số điện thoại người nhận tại địa chỉ này
  province       String
  provinceName   String
  district       String
  districtName   String
  ward           String
  wardName       String // tên phường/xã đầy đủ
  addressDetail  String
  addressNotes   String? // có thể null
  orderOnline    OrderOnline[] // nếu một địa chỉ có thể dùng cho nhiều đơn
  // Quan hệ với tài khoản

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Account   Account[]
}
